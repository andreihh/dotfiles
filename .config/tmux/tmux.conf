# tmux.conf

# List of plugins. Plugin manager commands:
# - <Prefix> + I (install new plugins)
# - <Prefix>-u (update existing plugins)
# - <Prefix> + Alt-u (uninstall removed plugins)
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-urlview'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Use Alt-a as the <Prefix> key.
set -g prefix M-a

# Use `tmux` rather than `screen` because it has more capabilities.
set -s default-terminal 'tmux-256color'

# Enable true colors if the terminal has the capability (most `xterm`s do).
set -sa terminal-features ',xterm*color*:RGB'

# Allow `tmux` and apps inside `tmux` to modify system clipboard.
set -s set-clipboard on

# Enable mouse support.
set -g mouse on
set -g @yank_selection_mouse 'clipboard'

# Set the title of the host terminal.
set -g set-titles on
set -g set-titles-string '#S:#h:#W'

# Index windows and panes starting at 1.
set -g base-index 1
set -g pane-base-index 1

# When we add or remove windows, renumber them in sequential order.
set -g renumber-windows on

# Automatically rename windows.
setw -g automatic-rename on
setw -g automatic-rename-format '#{b:pane_current_path}:#{pane_current_command}'

# Monitor window activity, but don't send audio or visual notifications.
set -g monitor-activity on
set -g activity-action none

# Customize status bar.
set -g status on
set -g status-position bottom
set -g status-justify centre
set -g status-left-length 60
set -g status-right-length 80

# Customize battery status indicators.
set -g @batt_icon_status_charged 'AC'
set -g @batt_icon_status_charging 'AC+'
set -g @batt_icon_status_discharging 'BAT-'
set -g @batt_icon_status_attached 'BAT#'
set -g @batt_icon_status_unknown 'BAT?'

# Sonokai color scheme: https://github.com/sainnhe/sonokai
set -g @fg brightwhite
set -g @reverse_fg black
set -g @highlight_bg "#414550"
set -g @pane_fg white
set -g @current_pane_fg cyan
set -g @status_bg colour8
set -g @seg_bg "#414550"
set -g @current_seg_bg brightred
set -g @activity_seg_fg cyan
set -g @host_seg_bg brightcyan

# Icons require a Nerd Font
if 'test -z "$NERD_FONT_ENABLED"' \
  'set -g @seg_start ""; set -g @seg_sep "|"; set -g @seg_end ""; \
    setw -g @win_sep " "' \
  'set -g @seg_start ""; set -g @seg_sep ""; set -g @seg_end ""; \
    setw -g @win_sep ""'

# Set color scheme.
setw -gF pane-border-style "fg=#{@pane_fg}"
setw -gF pane-active-border-style "fg=#{@current_pane_fg}"
setw -gF mode-style "bg=#{@highlight_bg}"
set -gF message-command-style "bg=#{@highlight_bg}"
set -gF message-style "bg=#{@highlight_bg}"
set -gF status-style "fg=#{@fg},bg=#{@status_bg},bold"
set -gFa status-left-style "bg=#{@seg_bg}"  # Append style to retain alignment
set -gFa status-right-style "bg=#{@seg_bg}"  # Append style to retain alignment
setw -gF window-status-style "bg=#{@seg_bg}"
setw -gF window-status-activity-style "fg=#{@activity_seg_fg}"
setw -gF window-status-current-style "fg=#{@reverse_fg},bg=#{@current_seg_bg}"

# Customize left status segments.
set -g status-left "\
#[fg=#{@reverse_fg},bg=#{@host_seg_bg}] #h \
#[fg=#{@host_seg_bg},bg=default]#{@seg_end}\
#[fg=default] #S \
#[fg=#{@seg_bg},bg=#{@status_bg}]#{@seg_end}"

# Customize right status segments.
set -g status-right "\
#[fg=#{@seg_bg},bg=#{@status_bg}]#{@seg_start}#[fg=default,bg=default]\
#[fg=default] %H:%M \
#[fg=default]#{@seg_sep}\
#{battery_color_fg}#[bg=default] #{battery_icon_status} #{battery_percentage} \
#[fg=default]#{@seg_sep}\
#{cpu_temp_fg_color} T #{cpu_temp} \
#[fg=default]#{@seg_sep}\
#{cpu_fg_color} CPU #{cpu_percentage} \
#[fg=default]#{@seg_sep}\
#{ram_fg_color} RAM #{ram_percentage} "

# Customize window list separator.
setw -gF window-status-separator "#{@win_sep}"

# Customize window segment.
setw -g window-status-format "\
#[fg=#{@seg_bg},bg=#{@status_bg}]#{@seg_start}#[fg=default,bg=default]\
 #I #{@seg_sep} #W \
#[fg=#{@seg_bg},bg=#{@status_bg}]#{@seg_end}"

# Customize active window segment.
setw -g window-status-current-format "\
#[fg=#{@current_seg_bg},bg=#{@status_bg}]#{@seg_start}#[fg=default,bg=default]\
 #I #{@seg_sep} #W #{@seg_sep} #F \
#[fg=#{@current_seg_bg},bg=#{@status_bg}]#{@seg_end}"

# Use Vim shortcuts:
# - Alt-Enter (enter copy mode)
# - v (begin selection)
# - y (copy selection)
# - q (exit copy mode)
# - Alt-p (paste selection, must be configured via terminal preferences)
set -g status-keys vi
setw -g mode-keys vi
bind -n M-Enter copy-mode
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi q send -X cancel

# Smart window and pane controls with Vim awareness:
# - Ctrl-t (open window)
# - Ctrl-s/v (split pane horizontally / vertically)
# - Ctrl-h/j/k/l (navigate panes)
# - Alt-h/j/k/l (resize panes)
# - Alt-= (resize all panes equally)
# - Ctrl-z (toggle pane zoom to cover entire window)
# - Ctrl-x (close pane)
# - Ctrl-w (close window)
#
# See:
# - https://github.com/christoomey/vim-tmux-navigator
# - https://github.com/RyanMillerC/better-vim-tmux-resizer
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind -n C-t if "$is_vim" 'send C-t' 'new-window -c "#{pane_current_path}"'
bind -n C-s if "$is_vim" 'send C-s' 'split-window -v -c "#{pane_current_path}"'
bind -n C-v if "$is_vim" 'send C-v' 'split-window -h -c "#{pane_current_path}"'
bind -n C-h if "$is_vim" 'send C-h' 'select-pane -L'
bind -n C-j if "$is_vim" 'send C-j' 'select-pane -D'
bind -n C-k if "$is_vim" 'send C-k' 'select-pane -U'
bind -n C-l if "$is_vim" 'send C-l' 'select-pane -R'
bind -n M-h if "$is_vim" 'send M-h' 'resize-pane -L 5'
bind -n M-j if "$is_vim" 'send M-j' 'resize-pane -D 5'
bind -n M-k if "$is_vim" 'send M-k' 'resize-pane -U 5'
bind -n M-l if "$is_vim" 'send M-l' 'resize-pane -R 5'
bind -n M-= if "$is_vim" 'send M-=' 'select-layout tiled'
bind -n C-z if "$is_vim" 'send C-z' 'resize-pane -Z'
bind -n C-x if "$is_vim" 'send C-x' 'kill-pane'
bind -n C-w if "$is_vim" 'send C-w' 'kill-window'

# Commands that are not forwarded to Vim:
# - Alt-1/2/.../9 (switch windows)
# - Alt-t (open window)
# - Alt-s/v (split pane horizontally / vertically)
# - Alt-+ (resize all panes equally)
# - Alt-z (toggle pane zoom to cover entire window)
# - Alt-x (close pane)
# - Alt-w (close window)
# - Ctrl-q (close session)
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9
bind -n M-t new-window -c "#{pane_current_path}"
bind -n M-s split-window -v -c "#{pane_current_path}"
bind -n M-v split-window -h -c "#{pane_current_path}"
bind -n M-+ select-layout tiled
bind -n M-z resize-pane -Z
bind -n M-x kill-pane
bind -n M-w kill-window
bind -n C-q kill-session

# Commands should work in copy mode:
bind -T copy-mode-vi C-s split-window -v -c "#{pane_current_path}"
bind -T copy-mode-vi C-v split-window -h -c "#{pane_current_path}"
bind -T copy-mode-vi C-h select-pane -L
bind -T copy-mode-vi C-j select-pane -D
bind -T copy-mode-vi C-k select-pane -U
bind -T copy-mode-vi C-l select-pane -R
bind -T copy-mode-vi M-h resize-pane -L 5
bind -T copy-mode-vi M-j resize-pane -D 5
bind -T copy-mode-vi M-k resize-pane -U 5
bind -T copy-mode-vi M-l resize-pane -R 5
bind -T copy-mode-vi M-= select-layout tiled
bind -T copy-mode-vi C-z resize-pane -Z
bind -T copy-mode-vi C-x kill-pane
bind -T copy-mode-vi C-w kill-window
bind -T copy-mode-vi C-q kill-session

# Media commands in copy mode:
# - o (open highlighted URI)
# - O (search highlighted text using the specified search engine)
# - Ctrl-o (edit highlighted file in the default text editor)
set -g @open-O 'https://www.google.com/search?q='
set -g @open-editor 'C-o'

# List URLs and open one using <Prefix> + o.
set -g @urlview-key 'o'

# Detach from the current session using Alt-d.
bind -n M-d detach

# Configure autosave / restore options. Use <Prefix> + Ctrl-s for manual save.
set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-restore 'on'
set -g @continuum-save-interval '1'

# Set XDG-compliant TPM path.
setenv -g TMUX_PLUGIN_MANAGER_PATH "$XDG_DATA_HOME/tmux/plugins"

# Install TPM and plugins automatically.
if 'test ! -d "$TMUX_PLUGIN_MANAGER_PATH/tpm"' \
   'run "git clone https://github.com/tmux-plugins/tpm \
       \"$TMUX_PLUGIN_MANAGER_PATH/tpm\" \
       && \"$TMUX_PLUGIN_MANAGER_PATH/tpm/bin/install_plugins\""'

# Initialize TPM. Keep this line at the very bottom of `tmux.conf`.
run '"$TMUX_PLUGIN_MANAGER_PATH/tpm/tpm"'

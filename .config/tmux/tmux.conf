# tmux.conf: configures `tmux`.
#
# Enables icons and colorscheme based on the following environment variables:
# - `${NERD_FONT_ENABLED}`
# - `${COLORSCHEME}`

# List of plugins. Plugin manager commands:
# - <prefix> + I (install new plugins)
# - <prefix>-u (update existing plugins)
# - <prefix> + M-u (uninstall removed plugins)
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Make Esc more responsive.
set -s escape-time 5

# Use C-a as the <prefix> key.
set -g prefix C-a

# Use `tmux` rather than `screen` because it has more capabilities.
set -s default-terminal 'tmux-256color'

# Enable true colors if the terminal has the capability (most `xterm`s do).
set -sa terminal-features ',xterm*color*:RGB'

# Allow `tmux` and apps inside `tmux` to modify system clipboard.
set -s set-clipboard on

# Enable mouse support.
set -g mouse on
set -g @yank_selection_mouse 'clipboard'

# Set the title of the host terminal.
set -g set-titles on
set -g set-titles-string '#S:#h:#W'

# Index windows and panes starting at 1.
set -g base-index 1
set -g pane-base-index 1

# When we add or remove windows, renumber them in sequential order.
set -g renumber-windows on

# Automatically rename windows.
setw -g automatic-rename on
setw -g automatic-rename-format '#{b:pane_current_path}:#{pane_current_command}'

# Monitor window activity, but don't send audio or visual notifications.
set -g monitor-activity on
set -g activity-action none

# Customize status bar.
set -g status on
set -g status-position bottom
set -g status-justify centre
set -g status-left-length 60
set -g status-right-length 80
set -g status-style bold

# Customize battery status indicators.
set -g @batt_icon_status_charged 'AC'
set -g @batt_icon_status_charging 'AC+'
set -g @batt_icon_status_discharging 'BAT-'
set -g @batt_icon_status_attached 'BAT#'
set -g @batt_icon_status_unknown 'BAT?'

# Customize left status segments.
set -g status-left "\
#[fg=black,bg=green] #h \
#[fg=default,bg=default] #S "

# Customize right status segments.
set -g status-right "\
#[fg=default] %H:%M \
#[fg=default]│\
#{battery_color_fg}#[bg=default] #{battery_icon_status} #{battery_percentage} \
#[fg=default]│\
#{cpu_temp_fg_color} T #{cpu_temp} \
#[fg=default]│\
#{cpu_fg_color} CPU #{cpu_percentage} \
#[fg=default]│\
#{ram_fg_color} RAM #{ram_percentage} "

# Customize window list.
setw -gF window-status-separator " "
setw -g window-status-activity-style fg=blue
setw -g window-status-current-style fg=red

# Customize window segment.
setw -g window-status-format " #I │ #W "

# Customize current window segment.
setw -g window-status-current-format " #I │ #W │ #F "

# Use Vim shortcuts in copy mode:
# - C-n = enter copy mode
# - C-s = select word under cursor
# - v = begin selection
# - y = yank selection
# - Escape = clear selection
# - q = quit copy mode
set -g status-keys vi
setw -g mode-keys vi
bind -n C-n copy-mode
bind -T copy-mode-vi C-s send -X select-word
bind -T copy-mode-vi v send -X begin-selection

# Smart window and pane controls with Vim and `fzf` awareness:
# - C-s/v/t/z/x/w = perform window action
# - C-h/j/k/l = navigate panes across Vim and `tmux`
# - M-h/j/k/l/= = resize panes across Vim and `tmux`
#
# See:
# - https://github.com/christoomey/vim-tmux-navigator
# - https://github.com/RyanMillerC/better-vim-tmux-resizer
is_vim_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(g?(view|l?n?vim?x?)(diff)?)|fzf$'"
bind -n C-s if "${is_vim_fzf}" 'send C-s' 'split-window -v -c "#{pane_current_path}"'
bind -n C-v if "${is_vim_fzf}" 'send C-v' 'split-window -h -c "#{pane_current_path}"'
bind -n C-t if "${is_vim_fzf}" 'send C-t' 'new-window -c "#{pane_current_path}"'
bind -n C-z if "${is_vim_fzf}" 'send C-z' 'resize-pane -Z'
bind -n C-x if "${is_vim_fzf}" 'send C-x' 'kill-pane'
bind -n C-w if "${is_vim_fzf}" 'send C-w' 'kill-window'
bind -n C-h if "${is_vim_fzf}" 'send C-h' 'select-pane -L'
bind -n C-j if "${is_vim_fzf}" 'send C-j' 'select-pane -D'
bind -n C-k if "${is_vim_fzf}" 'send C-k' 'select-pane -U'
bind -n C-l if "${is_vim_fzf}" 'send C-l' 'select-pane -R'
bind -n M-h if "${is_vim_fzf}" 'send M-h' 'resize-pane -L 5'
bind -n M-j if "${is_vim_fzf}" 'send M-j' 'resize-pane -D 5'
bind -n M-k if "${is_vim_fzf}" 'send M-k' 'resize-pane -U 5'
bind -n M-l if "${is_vim_fzf}" 'send M-l' 'resize-pane -R 5'
bind -n M-= if "${is_vim_fzf}" 'send M-=' 'select-layout tiled'

# URL scan commands:
# - C-o = scan URLs
# - y = yank selected URL to clipboard
# - x = open selected URL
# - q = quit
bind -n C-o if "${is_vim_fzf}" 'send C-o' '\
  capture-pane -J; \
  save-buffer /tmp/tmux-buffer; \
  delete-buffer; \
  split-window -l 10 "cat /tmp/tmux-buffer | urlscan -d -c"'

# Commands that are not forwarded to Vim and `fzf`:
# - M-1/2/.../9 = switch windows
# - M-s/v/t/z/x/w = perform window action
# - M-+ = resize all panes equally
# - M-d = detach from session
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9
bind -n M-s split-window -v -c "#{pane_current_path}"
bind -n M-v split-window -h -c "#{pane_current_path}"
bind -n M-t new-window -c "#{pane_current_path}"
bind -n M-z resize-pane -Z
bind -n M-x kill-pane
bind -n M-w kill-window
bind -n M-+ select-layout tiled
bind -n M-d detach

# Commands that should work in copy mode:
# - C/M-x/w = perform window action
bind -T copy-mode-vi C-x kill-pane
bind -T copy-mode-vi C-w kill-window
bind -T copy-mode-vi M-x kill-pane
bind -T copy-mode-vi M-w kill-window

# Media commands in copy mode:
# - o = edit highlighted file in the default text editor
# - x = open highlighted URI
# - X = search highlighted text using the specified search engine
set -g @open-editor 'o'
set -g @open 'x'
set -g @open-X 'https://www.google.com/search?q='

# Configure autosave / restore options. Use <prefix> + C-s for manual save.
set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-restore 'on'
set -g @continuum-save-interval '1'

# Set XDG-compliant `tmuxline` path.
if 'test -n "${XDG_CONFIG_HOME}"' \
  'setenv -g TMUXLINE_PATH "${XDG_CONFIG_HOME}/tmux/tmuxline"' \
  'setenv -g TMUXLINE_PATH "${HOME}/.config/tmux/tmuxline"'

# Load colorscheme if defined and it exists.
if 'test -f "${TMUXLINE_PATH}/${COLORSCHEME}.tmux"' \
  'run "${TMUXLINE_PATH}/${COLORSCHEME}.tmux"'

# Set XDG-compliant TPM path.
if 'test -n "${XDG_DATA_HOME}"' \
  'setenv -g TMUX_PLUGIN_MANAGER_PATH "${XDG_DATA_HOME}/tmux/plugins"' \
  'setenv -g TMUX_PLUGIN_MANAGER_PATH "${HOME}/.local/share/tmux/plugins"'

# Install TPM and plugins automatically.
if 'test ! -d "${TMUX_PLUGIN_MANAGER_PATH}/tpm"' \
  'run "git clone https://github.com/tmux-plugins/tpm \
    \"${TMUX_PLUGIN_MANAGER_PATH}/tpm\" \
    && \"${TMUX_PLUGIN_MANAGER_PATH}/tpm/bin/install_plugins\""'

# Initialize TPM. Keep this line at the very bottom of `tmux.conf`.
run '"${TMUX_PLUGIN_MANAGER_PATH}/tpm/tpm"'

# tmux.conf: configures `tmux`.
#
# Requirements:
# - Terminal capabilities: truecolors, Nerd Font, OSC52
# - Tools: `git`, `lm-sensors`, `urlscan`

# [[ XDG specification ]]

# Set XDG-compliant config path.
if 'test -n "${XDG_CONFIG_HOME}"' \
  { setenv -g TMUX_CONFIG_HOME "${XDG_CONFIG_HOME}/tmux" } \
  { setenv -g TMUX_CONFIG_HOME "${HOME}/.config/tmux" }

# Set XDG-compliant TPM path.
if 'test -n "${XDG_DATA_HOME}"' \
  { setenv -g TMUX_PLUGIN_MANAGER_PATH "${XDG_DATA_HOME}/tmux/plugins" } \
  { setenv -g TMUX_PLUGIN_MANAGER_PATH "${HOME}/.local/share/tmux/plugins" }

# [[ Plugins ]]

# List of plugins. Plugin manager commands:
# - <prefix> + R = reload config
# - <prefix> + I = install new plugins
# - <prefix>-u = update plugins
# - <prefix> + M-u = uninstall removed plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-cpu'

# [[ Options ]]

# Make Esc more responsive.
set -s escape-time 5

# Use M-a as the <prefix> key.
set -g prefix M-a

# Use `tmux` rather than `screen` because it has more capabilities.
set -s default-terminal 'tmux-256color'

# Enable true colors if the terminal has the capability:
# - Most `xterm`s
# - Ghostty
# - Alacritty
# See https://github.com/tmux/tmux/wiki/FAQ#how-do-i-use-rgb-colour.
set -sa terminal-features ',xterm*color*:RGB'
set -sa terminal-features ',*ghostty*:RGB'
set -sa terminal-features ',*alacritty*:RGB'

# The following terminals already have the `clipboard` capability configured:
# - `xterm`
# - Ghostty
# - Alacritty
# See https://github.com/tmux/tmux/wiki/Clipboard.

# Allow `tmux` and apps inside to modify the system clipboard using OSC52.
set -s set-clipboard on

# Enable mouse support.
set -g mouse on

# Set the title of the host terminal.
set -g set-titles on
set -g set-titles-string "#S:#h"

# Index windows and panes starting at 1.
set -g base-index 1
set -g pane-base-index 1

# When we add or remove windows, renumber them in sequential order.
set -g renumber-windows on

# Automatically rename windows.
setw -g automatic-rename on
setw -g automatic-rename-format "#{b:pane_current_path}:#{pane_current_command}"

# Monitor window activity, but don't send audio or visual notifications.
set -g monitor-activity on
set -g activity-action none

# Configure status bar positioning.
set -g status on
set -g status-position bottom
set -g status-justify centre
set -g status-left-length 80
set -g status-right-length 80

# Configure autosave and restore session options.
set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-restore 'on'
set -g @continuum-save-interval '1'

# Display copy mode indicator.
set -g @prefix_highlight_show_copy_mode 'on'

# Configure client status indicators.
set -g @host_icon '󰍹'  # `nf-md-monitor`
set -g @session_icon ''  # `nf-oct-terminal`
set -g @time_icon ''  # `nf-fa-clock`

# Configure battery status indicators.
set -g @batt_icon_charge_tier1 ' '  # [0-5%], `nf-fa-battery_empty`
set -g @batt_icon_charge_tier2 ' '  # [5-20%], `nf-fa-battery_quarter`
set -g @batt_icon_charge_tier3 ' '  # [20-35%], `nf-fa-battery_quarter`
set -g @batt_icon_charge_tier4 ' '  # [35-50%], `nf-fa-battery_half`
set -g @batt_icon_charge_tier5 ' '  # [50-65%], `nf-fa-battery_half`
set -g @batt_icon_charge_tier6 ' '  # [65-80%], `nf-fa-battery_three_quarters`
set -g @batt_icon_charge_tier7 ' '  # [80-95%], `nf-fa-battery_full`
set -g @batt_icon_charge_tier8 ' '  # [95-100%], `nf-fa-battery_full`
set -g @batt_icon_status_charged ' '  # `nf-fa-plug`
set -g @batt_icon_status_charging ' '  # `nf-fa-bolt`
set -g @batt_icon_status_discharging ' '
set -g @batt_icon_status_attached ' '  # `nf-fa-warning`
set -g @batt_icon_status_unknown ' '  # `nf-fa-question`

# Round CPU and RAM stats to decimal.
set -g @cpu_temp_format '%.f'
set -g @cpu_percentage_format '%.f%%'
set -g @ram_percentage_format '%.f%%'

# [[ Keymaps ]]

# Manage keymaps for current session:
# - M-S-k = toggle keymaps
bind -n M-K set key-table off \; set status-position top
bind -T off M-K set -u key-table \; set status-position bottom

# Returns if the current pane runs Vim. Used for Vim-aware smart commands.
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"

# Use Vim shortcuts in copy mode:
# - C-e = enter copy mode
# - C-s = select word under cursor
# - v / V = begin (line) selection
# - y = yank selection
# - Escape = clear selection
# - q = quit copy mode
# - C/M-x/w = perform window action
set -g status-keys vi
setw -g mode-keys vi
bind -n C-e if "${is_vim}" 'send C-e' 'copy-mode'
bind -T copy-mode-vi C-s send -X select-word
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi y send -X copy-selection
bind -T copy-mode-vi C-x kill-pane
bind -T copy-mode-vi C-w kill-window
bind -T copy-mode-vi M-x kill-pane
bind -T copy-mode-vi M-w kill-window

# Smart window and pane controls with Vim and `fzf` awareness:
# - C-s/v/t/z/x/w = perform window action
# - C-h/j/k/l = navigate panes across Vim and `tmux`
# - M-h/j/k/l/= = resize panes across Vim and `tmux`
#
# See:
# - https://github.com/christoomey/vim-tmux-navigator
# - https://github.com/RyanMillerC/better-vim-tmux-resizer
bind -n C-s if "${is_vim}" 'send C-s' 'split-window -vc "#{pane_current_path}"'
bind -n C-v if "${is_vim}" 'send C-v' 'split-window -hc "#{pane_current_path}"'
bind -n C-t if "${is_vim}" 'send C-t' 'new-window -c "#{pane_current_path}"'
bind -n C-z if "${is_vim}" 'send C-z' 'resize-pane -Z'
bind -n C-x if "${is_vim}" 'send C-x' 'kill-pane'
bind -n C-w if "${is_vim}" 'send C-w' 'kill-window'
bind -n C-h if "${is_vim}" 'send C-h' 'select-pane -L'
bind -n C-j if "${is_vim}" 'send C-j' 'select-pane -D'
bind -n C-k if "${is_vim}" 'send C-k' 'select-pane -U'
bind -n C-l if "${is_vim}" 'send C-l' 'select-pane -R'
bind -n M-h if "${is_vim}" 'send M-h' 'resize-pane -L 5'
bind -n M-j if "${is_vim}" 'send M-j' 'resize-pane -D 5'
bind -n M-k if "${is_vim}" 'send M-k' 'resize-pane -U 5'
bind -n M-l if "${is_vim}" 'send M-l' 'resize-pane -R 5'
bind -n M-= if "${is_vim}" 'send M-=' 'select-layout tiled'

# Manage sessions:
# - C-o = open session / window / pane
#   - h/j/k/l = collapse / select next / select previous / expand node
#   - Enter / (label) = select node
#   - x = kill node
#   - y = confirm
#   - q / <esc> = quit
# - C-n = new session
# - <prefix> + C-s = save session
bind -n C-o if "${is_vim}" 'send C-o' 'choose-tree -Zs'
bind -n C-n if "${is_vim}" 'send C-n' {
  command-prompt -p 'New session:' 'new -s "%%"'
}

# Commands that are not forwarded to Vim and `fzf`:
# - M-{1-9} = go to window
# - M-s/v/t/z/x/w = perform window action
# - M-+ = resize all panes equally
# - M-o = open session / window / pane
# - M-n = new session
# - M-q = detach from session
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9
bind -n M-s split-window -vc "#{pane_current_path}"
bind -n M-v split-window -hc "#{pane_current_path}"
bind -n M-t new-window -c "#{pane_current_path}"
bind -n M-z resize-pane -Z
bind -n M-x kill-pane
bind -n M-w kill-window
bind -n M-+ select-layout tiled
bind -n M-o choose-tree -Zs
bind -n M-n command-prompt -p 'New session:' 'new -s "%%"'
bind -n M-q detach

# URL scan commands:
# - C-u = scan URLs
# - x/y = open / yank selected URL to system clipboard using OSC52
# - h = change URL handler
# - q = quit
# - ? = show help
bind -n C-u if "${is_vim}" 'send C-u' {
  capture-pane -J; \
  save-buffer /tmp/tmux-buffer; \
  delete-buffer; \
  split-window -l 10 'cat /tmp/tmux-buffer | urlscan -dcp -r "tmux loadb -w -"'
}

# [[ Color scheme ]]

# Configure default ANSI color palette.
set -g @fg 'white'
set -g @reverse_fg 'black'
set -g @highlight_bg 'color8'
set -g @search_bg 'green'
set -g @match_bg 'red'
set -g @pane_fg 'gray'
set -g @current_pane_fg 'blue'
set -g @status_bg 'black'
set -g @current_seg_bg 'red'
set -g @activity_seg_fg 'blue'
set -g @prefix_highlight_fg 'blue'
set -g @prefix_highlight_copy_fg 'red'
set -g @host_fg 'green'  # Match shell prompt

# Load color scheme if defined and exists.
source -q "${TMUX_CONFIG_HOME}/themes/${COLORSCHEME}.tmux"

# Set color scheme.
setw -gF pane-border-style "fg=#{@pane_fg}"
setw -gF pane-active-border-style "fg=#{@current_pane_fg}"
setw -gF mode-style "bg=#{@highlight_bg}"
setw -gF copy-mode-match-style "fg=#{@reverse_fg},bg=#{@search_bg}"
setw -gF copy-mode-current-match-style "fg=#{@reverse_fg},bg=#{@match_bg}"
set -gF message-command-style "bg=#{@highlight_bg}"
set -gF message-style "bg=#{@highlight_bg}"
set -gF status-style "fg=#{@fg},bg=#{@status_bg},bold"
setw -gF window-status-activity-style "fg=#{@activity_seg_fg}"
setw -gF window-status-current-style "fg=#{@reverse_fg},bg=#{@current_seg_bg}"
set -gF @prefix_highlight_bg "default"
set -gF @prefix_highlight_copy_mode_attr "fg=#{@prefix_highlight_copy_fg}"

# [[ Status line ]]

# Configure segment separator symbols.
set -g @seg_start ''  # `nf-ple-lower_right_triangle`
set -g @seg_end ''  # `nf-ple-upper_left_triangle`
set -g @seg_sep ''  # `nf-ple-forwardslash_separator`
set -gF @prefix_highlight_output_suffix " #[fg=default]#{@seg_sep}"
setw -g window-status-separator ' '

# Configure left status segments.
set -g status-left "\
#[fg=#{@host_fg}] #{@host_icon} #h \
#[fg=default]#{@seg_sep} #{@session_icon} #S #{@seg_sep}\
#{prefix_highlight}\
"

# Configure right status segments.
set -g status-right "\
#[fg=default]#{@seg_sep} #{@time_icon} %H:%M \
#[fg=default]#{@seg_sep}#{battery_color_fg}#[bg=default] \
#{battery_icon_charge}#{battery_icon_status}#{battery_percentage} \
#[fg=default]#{@seg_sep}#{cpu_temp_fg_color} T #{cpu_temp} \
#[fg=default]#{@seg_sep}#{cpu_fg_color} CPU #{cpu_percentage} \
#[fg=default]#{@seg_sep}#{ram_fg_color} RAM #{ram_percentage} \
"

# Configure window segment.
setw -g window-status-format " #I #{@seg_sep} #W "

# Configure active window segment.
setw -g window-status-current-format "\
#[fg=#{@current_seg_bg},bg=#{@status_bg}]#{@seg_start}\
#[fg=default,bg=default] #I #{@seg_sep} #W #{@seg_sep} #F \
#[fg=#{@current_seg_bg},bg=#{@status_bg}]#{@seg_end}"

# [[ Config overrides ]]

# Load optional user overrides.
source -q "${TMUX_CONFIG_HOME}/overrides.tmux"

# [[ Plugin manager ]]

# Install TPM and plugins automatically.
run 'test ! -d "${TMUX_PLUGIN_MANAGER_PATH}/tpm" \
  && git clone https://github.com/tmux-plugins/tpm \
    "${TMUX_PLUGIN_MANAGER_PATH}/tpm" \
  && "${TMUX_PLUGIN_MANAGER_PATH}/tpm/bin/install_plugins"'

# Initialize TPM. Keep this line at the very bottom of `tmux.conf`.
run '"${TMUX_PLUGIN_MANAGER_PATH}/tpm/tpm"'

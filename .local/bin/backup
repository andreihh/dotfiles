#!/bin/bash -e
#
# Manages encrypted incremental backups for:
# - dotfiles
# - all directories starting with an uppercase letter from the home directory
#
# See:
# - https://rclone.org/crypt/
# - https://rclone.org/docs/#environment-variables
#
# Dependencies: `rclone`

readonly REMOTE='backup'
export RCLONE_CONFIG='/dev/null'
export RCLONE_CONFIG_BACKUP_TYPE='crypt'  # Name must match `REMOTE` value

usage() {
  cat << EOF
Usage: $0 [-h] [-n] [-b|-r] -d DIR

Options:
  -n  Perform a dry run (simulate actions, but do not execute them).
  -b  Back up system to the specified directory (default operation).
  -r  Restore system from the specified directory.
  -d  Backup directory.
  -h  Print this message and exit.
EOF
}

operation='backup'
while getopts 'nbrd:h' option; do
  case "${option}" in
    n) export RCLONE_DRY_RUN=true ;;
    b) operation='backup' ;;
    r) operation='restore' ;;
    d) backup_dir="$(readlink -f "${OPTARG}")" ;;
    h) usage && exit 0 ;;
    *) usage && exit 1 ;;
  esac
done

[[ -z "${backup_dir}" ]] && echo "Invalid backup directory!" && exit 1
export RCLONE_CONFIG_BACKUP_REMOTE="${backup_dir}"

[[ -n "${RCLONE_DRY_RUN}" ]] && echo "Performing a dry run!"

read -srp "Enter backup password: " backup_password
echo  # Print an empty line after entering the password
read -srp "Confirm backup password: " confirm_password
echo  # Print an empty line after entering the password

[[ "${backup_password}" != "${confirm_password}" ]] \
  && echo "Passwords mismatch!" && exit 1

unset confirm_password
backup_password="$(rclone obscure "${backup_password}")"
export RCLONE_CONFIG_BACKUP_PASSWORD="${backup_password}"

dotfiles_relpath="${XDG_CONFIG_HOME:-${HOME}/.config}/dotfiles"
dotfiles_relpath="${dotfiles_relpath/#${HOME}\//}"

case "${operation}" in
  backup)
    cmd='sync'
    src="${HOME}"
    dst="${REMOTE}:"
    filter="/{[A-Z]*,${dotfiles_relpath}}/**"
    echo "Backing up to '${backup_dir}' with filter '${filter}'..."
    ;;
  restore)
    cmd='copy'
    src="${REMOTE}:"
    dst="${HOME}"
    filter='/**'
    echo "Restoring from '${backup_dir}'..."
    ;;
  *) echo "Invalid operation '${operation}'!" && exit 1 ;;
esac

echo "Current backup includes:"
rclone lsf "${REMOTE}:"

echo "Proceed? [y/n]"
read -r confirmation
case "${confirmation}" in
  y) echo "Proceeding..." ;;
  *) echo "Aborted!" && exit 0 ;;
esac

rclone "${cmd}" "${src}" "${dst}" --include "${filter}" --progress

echo "Done!"

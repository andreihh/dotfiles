#!/bin/sh
#
# Manages `tmux` sessions.
#
# Dependencies: `tmux`, `fzf`

# Exit if any command fails.
set -e

[ $# -gt 1 ] && echo "Usage: $0 [- | . | <session>]" && exit 1

# Start the `tmux` server as a daemon.
tmux start\; set -g exit-empty off

# Handle special session names:
# - `-` = try to attach to the last session if not already inside `tmux`
# - `.` = use the basename of the current working directory as the session name
case "$1" in
  '-') [ -z "${TMUX}" ] && tmux attach 2> /dev/null && exit ;;
  '.') session="$(basename "$(pwd)")" ;;
  *) session="$1" ;;
esac

# Start session manager if no session was provided or last session wasn't found.
if [ -z "${session}" ]; then
  session="$(
    tmux ls -F "#S" | fzf --tmux \
      --prompt='Session> ' \
      --header=':: <ctrl-n> to create | <ctrl-x> to delete' \
      --bind='jump:accept' \
      --bind='ctrl-n:print-query' \
      --bind='ctrl-x:execute-silent(tmux kill-session -t ={})' \
      --bind='ctrl-x:+reload-sync(tmux ls -F "#S")'
  )" || { [ $? = 130 ] && echo "Cancelled!" 1>&2 && exit 0; }
fi

[ -z "${session}" ] && echo "Session name must not be empty!" 1>&2 && exit 1

# Ensure the selected session exists and attach / switch to it.
tmux new -d -s "${session}" 2> /dev/null
if [ -z "${TMUX}" ]; then
  tmux attach -t ="${session}"
else
  tmux switch -t ="${session}"
fi

#!/bin/sh
#
# Starts the `tmux` server as a daemon and manages sessions.
#
# Special session names:
# - `-` = previously attached session, or `admin` if no sessions exist
# - `.` = basename of the current working directory
#
# Dependencies: `tmux`, `fzf`

# Exit if any command fails.
set -e

[ $# -gt 1 ] && echo "Usage: $0 [- | . | <session>]" && exit 1

# Start the server as a daemon.
tmux start\; set -g exit-empty off

if [ $# -eq 1 ]; then
  session="$1"
else
  session="$(
    tmux ls -F "#S" | fzf --tmux \
      --prompt='Session> ' \
      --header=':: <ctrl-n> to create | <ctrl-x> to delete' \
      --bind='jump:accept' \
      --bind='ctrl-n:print-query' \
      --bind='ctrl-x:execute-silent(tmux kill-session -t {})' \
      --bind='ctrl-x:+reload-sync(tmux ls -F "#S")'
  )" || { [ $? = 130 ] && echo "Cancelled!" 1>&2 && exit 0; }
fi

case "${session}" in
  '') echo "Session name must not be empty!" 1>&2 && exit 1 ;;
  '-') session='' ;;
  '.') session="$(basename "$(pwd)")" ;;
  *) ;;
esac

# Create session if it doesn't exist. If empty and none exist, create `admin`.
tmux has -t "${session}" 2> /dev/null || tmux new -d -s "${session:-admin}"

# Attach or switch to selected session, or to previously attached one if empty.
if [ -z "${TMUX}" ]; then
  tmux attach -t "${session}"
else
  tmux switch -t "${session}"
fi
